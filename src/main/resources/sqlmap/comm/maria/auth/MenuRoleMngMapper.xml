<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="comm.auth.menuRoleMng">
    <select id="selectMenuRole" resultType="camelHashMap">
    /* comm.menuRoleMng.selectMenuRole : 역할별메뉴 조회 */
          WITH RECURSIVE CTE AS (
            SELECT COM_ID
            	  ,MENU_ID
                  ,UP_MENU_ID
                  ,MENU_NM
                  ,SORT_SEQ
                  ,USE_FG
                  ,0 AS LVL
            	  ,CONVERT(CONCAT(REPEAT('0', 5-LENGTH(SORT_SEQ)), SORT_SEQ), VARCHAR(100)) AS T
              FROM COMM_MENU
             WHERE COM_ID=#{session.comId}
               AND MENU_ID = '0'
               
             UNION ALL
             
            SELECT A.COM_ID
            	  ,A.MENU_ID
                  ,A.UP_MENU_ID
                  ,A.MENU_NM
                  ,A.SORT_SEQ
                  ,A.USE_FG
                  ,LVL + 1 AS LVL
             	  ,CONVERT(CONCAT(T, '-', REPEAT('0', 5-LENGTH(A.SORT_SEQ)), A.SORT_SEQ), VARCHAR(100)) AS T
              FROM COMM_MENU A
             INNER JOIN CTE B ON A.COM_ID=B.COM_ID AND A.UP_MENU_ID = B.MENU_ID
             WHERE A.COM_ID= #{session.comId}
        )
        SELECT A.MENU_ID
              ,A.UP_MENU_ID
              ,A.MENU_NM
              ,A.SORT_SEQ
              ,A.USE_FG
              ,A.LVL
              ,A.UP_MENU_ID AS PARENT_ID
              ,B.ROLE_ID
              ,B.COM_ID
              ,MAX(CASE WHEN C.AUTH_CD = 'R' THEN '1' ELSE '0' END) AS AUTH_CD1
              ,MAX(CASE WHEN C.AUTH_CD = 'C' THEN '1' ELSE '0' END) AS AUTH_CD2
              ,MAX(CASE WHEN C.AUTH_CD = 'D' THEN '1' ELSE '0' END) AS AUTH_CD3
              ,MAX(CASE WHEN C.AUTH_CD = 'U' THEN '1' ELSE '0' END) AS AUTH_CD4
              ,MAX(CASE WHEN C.AUTH_CD = 'S' THEN '1' ELSE '0' END) AS AUTH_CD5
              ,MAX(CASE WHEN C.AUTH_CD = 'E' THEN '1' ELSE '0' END) AS AUTH_CD6
          FROM CTE A /* 메뉴Tree */
          LEFT OUTER JOIN COMM_MENU_ROLE B /* 역할별메뉴 */ ON (A.COM_ID=B.COM_ID AND B.ROLE_ID = #{roleId} AND A.MENU_ID = B.MENU_ID)
          LEFT OUTER JOIN COMM_MENU_ROLE_AUTH C /* 역할별메뉴권한 */ ON (B.COM_ID = C.COM_ID AND B.ROLE_ID = C.ROLE_ID AND B.MENU_ID = C.MENU_ID)
         WHERE A.COM_ID= #{session.comId}
           AND B.ROLE_ID IS NOT NULL
         GROUP
            BY A.MENU_ID, A.UP_MENU_ID, A.MENU_NM, A.SORT_SEQ, A.USE_FG
              ,A.LVL,A.UP_MENU_ID, B.ROLE_ID, B.COM_ID, A.T
         ORDER
            BY A.T
    </select>
    
    <select id="selectUnAsgnMenu" resultType="camelHashMap">
    /* comm.menuRoleMng.selectUnAsgnMenu : 역할별메뉴 조회 */
          WITH RECURSIVE CTE AS (
            SELECT MENU_ID
                  ,UP_MENU_ID
                  ,COM_ID
                  ,MENU_NM
                  ,SORT_SEQ
                  ,USE_FG
                  ,0 AS LVL
            	  ,CONVERT(CONCAT(REPEAT('0', 5-LENGTH(SORT_SEQ)), SORT_SEQ), VARCHAR(100)) AS T
              FROM COMM_MENU
             WHERE COM_ID= #{session.comId}
               AND MENU_ID = '0'
               
             UNION ALL
             
            SELECT A.MENU_ID
                  ,A.UP_MENU_ID
                  ,A.COM_ID
                  ,A.MENU_NM
                  ,A.SORT_SEQ
                  ,A.USE_FG
                  ,LVL + 1 AS LVL
             	  ,CONVERT(CONCAT(T, '-', REPEAT('0', 5-LENGTH(A.SORT_SEQ)), A.SORT_SEQ), VARCHAR(100)) AS T
              FROM COMM_MENU A
             INNER JOIN CTE B ON A.UP_MENU_ID = B.MENU_ID
             WHERE A.COM_ID=#{session.comId}
        )
        SELECT A.MENU_ID
              ,A.UP_MENU_ID
              ,A.MENU_NM
              ,A.SORT_SEQ
              ,A.USE_FG
              ,A.LVL
              ,A.UP_MENU_ID AS PARENT_ID
              ,A.COM_ID
              ,CASE WHEN B.MENU_ID IS NULL THEN '0'
                    ELSE '1'
                END AS IS_EXISTS
          FROM CTE A /* 메뉴Tree */
          LEFT OUTER JOIN COMM_MENU_ROLE B ON B.ROLE_ID = #{roleId} AND A.COM_ID = B.COM_ID AND A.MENU_ID = B.MENU_ID   
         WHERE A.COM_ID=#{session.comId}
         ORDER
            BY A.T
    </select>
    
    <update id="updateMenuRole">
    /* comm.menuRoleMng.updateMenuRole : 역할별메뉴 수정 */
    	INSERT INTO COMM_MENU_ROLE
        (
	         ROLE_ID
	        ,COM_ID
	        ,MENU_ID
	        ,RMRK
	        ,REG_USER_NO
	        ,REG_DTTM
	        ,PROC_USER_NO
	        ,PROC_DTTM
      	)
		 VALUES (
	         #{roleId}
	        ,#{session.comId}
	        ,#{menuId}
	        ,#{rmrk}
	        ,#{session.userNo}
	        ,NOW()
	        ,#{session.userNo}
	        ,NOW()    
	      )
		ON DUPLICATE KEY UPDATE
        PROC_USER_NO = #{session.userNo}
        ,PROC_DTTM = NOW()
		<if test="rmrk != null and rmrk != ''">
        ,RMRK = #{rmrk}
        </if>
   
    </update>
    
    <update id="updateCommMenu">
    /* comm.menuRoleMng.updateCommMenu : 역할별 메뉴 사용여부 수정 */
    	UPDATE COMM_MENU
    	 <trim prefix="SET" prefixOverrides=",">
	   		PROC_DTTM = sysdate()
            <if test="useFg != null and useFg != ''">
            ,USE_FG = #{useFg}
            </if>
            <if test="procUserNo != null and procUserNo != ''">
            ,PROC_USER_NO = #{procUserNo}
             </if>
         </trim>
         WHERE 1=1
         	AND COM_ID = #{session.comId}
         	AND MENU_ID = #{menuId}
         	
    </update>
    
    <delete id="deleteMenuRole">
    /* comm.menuRoleMng.deleteMenuRole : 역할별메뉴 삭제 */
        DELETE
          FROM COMM_MENU_ROLE
         WHERE 1=1
           AND ROLE_ID = #{roleId} 
           AND COM_ID = #{comId} 
           AND MENU_ID = #{menuId} 
    </delete>
    
    <insert id="insertMenuRoleAuth">
    /* comm.menuRoleMng.insertMenuRoleAuth : 역할별 메뉴 권한 등록 */
    	INSERT INTO COMM_MENU_ROLE_AUTH
    	(
    		COM_ID
	        ,ROLE_ID
	        ,MENU_ID
	        ,AUTH_CD
	        ,RMRK
	        ,REG_USER_NO
	        ,REG_DTTM
	        ,PROC_USER_NO
	        ,PROC_DTTM    
    	) VALUES(
    		#{session.comId}
            ,#{roleId}
            ,#{menuId}
            ,#{authCd}
            ,#{rmrk}
            ,#{session.userNo}
            ,NOW()
            ,#{session.userNo}
            ,NOW()
    	)
		ON DUPLICATE KEY UPDATE
        PROC_USER_NO = #{session.userNo}
        ,PROC_DTTM = NOW()
		<if test="rmrk != null and rmrk != ''">
        ,RMRK = #{rmrk}
        </if>
       
    </insert>
    
    <delete id="deleteMenuRoleAuth">
    /* comm.menuRoleMng.deleteMenuRoleAuth : 역할별 메뉴 권한 삭제 */
        DELETE
          FROM COMM_MENU_ROLE_AUTH
         WHERE 1=1
           AND COM_ID = #{session.comId} 
           AND ROLE_ID = #{roleId} 
           AND MENU_ID = #{menuId} 
           <if test="authCd != null and authCd != ''">
           AND AUTH_CD = #{authCd}
           </if> 
    </delete>

</mapper>