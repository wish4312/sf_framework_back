<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="comm.base.menuMng">
    <select id="selectCommMenuTree" resultType="com.lsitc.core.base.CamelHashMap" >
    /* comm.menuMng.selectCommMenuTree : 메뉴 트리 조회 */
    WITH RECURSIVE CTE AS (
        SELECT MENU_ID, PRGM_ID, UP_MENU_ID, MENU_NM, SORT_SEQ, USE_FG, RMRK, REG_USER_NO, REG_DTTM, PROC_USER_NO, PROC_DTTM, COM_ID, SYS_DIV_CD
            , 0 AS LVL
            , CONVERT(CONCAT(REPEAT('0', 5-LENGTH(SORT_SEQ)), SORT_SEQ), VARCHAR(100)) AS T
        FROM COMM_MENU
        WHERE 
        COM_ID = #{session.comId}
        	AND MENU_ID = '0'
        
        UNION ALL
        
        SELECT A.MENU_ID, A.PRGM_ID, A.UP_MENU_ID, A.MENU_NM, A.SORT_SEQ, A.USE_FG, A.RMRK, A.REG_USER_NO, A.REG_DTTM, A.PROC_USER_NO, A.PROC_DTTM, A.COM_ID, A.SYS_DIV_CD
             , LVL + 1 AS LVL
             , CONVERT(CONCAT(T, '-', REPEAT('0', 5-LENGTH(A.SORT_SEQ)), A.SORT_SEQ), VARCHAR(100)) AS T
         FROM COMM_MENU  A
        INNER JOIN CTE B ON A.COM_ID=B.COM_ID and A.UP_MENU_ID = B.MENU_ID WHERE A.COM_ID=#{session.comId}
       
    )
    SELECT A.MENU_ID, A.PRGM_ID, A.UP_MENU_ID, A.MENU_NM, A.SORT_SEQ, A.USE_FG, A.RMRK, A.REG_USER_NO, A.REG_DTTM, A.PROC_USER_NO, A.PROC_DTTM, A.COM_ID, IFNULL(A.SYS_DIV_CD, '') AS SYS_DIV_CD
         , A.LVL
         , A.UP_MENU_ID AS PARENT_ID 
      FROM CTE A
      LEFT OUTER JOIN COMM_PRGM B ON A.PRGM_ID = B.PRGM_ID
     WHERE 1=1 
       -- AND UP_MENU_ID <![CDATA[<>]]> ''
       AND A.COM_ID = #{session.comId}
       <if test="menuNm != null and menuNm != ''">
       AND (MENU_NM LIKE CONCAT('%', #{menuNm}, '%') OR MENU_ID = '0')
       </if>
       <if test="menuId != null and menuId != ''">
       AND (MENU_ID LIKE CONCAT('%', UPPER(#{menuId}), '%') OR MENU_ID = '0') 
       </if>
       <if test="useFg != null and useFg != ''">
       AND A.USE_FG = #{useFg}
       </if>
       <if test="sysDivCd != null and sysDivCd != ''">
       AND (A.SYS_DIV_CD = #{sysDivCd} OR MENU_ID = '0') -- root는 포함되도록..
       </if>
     ORDER 
        BY T
    </select>
    
    <select id="selectMenuPop" resultType="camelHashMap">
    /* comm.menuMng.selectMenuPop : 메뉴(팝업) 조회 */
    WITH RECURSIVE CTE AS (
        SELECT MENU_ID, PRGM_ID, UP_MENU_ID, MENU_NM, SORT_SEQ, USE_FG, RMRK, REG_USER_NO, REG_DTTM, PROC_USER_NO, PROC_DTTM, COM_ID
            , 0 AS LVL
            , CONVERT(CONCAT(REPEAT('0', 5-LENGTH(SORT_SEQ)), SORT_SEQ), VARCHAR(100)) AS T
        FROM COMM_MENU
        WHERE COM_ID = #{session.comId}
        	AND MENU_ID = '0'
        
        UNION ALL
        
        SELECT A.MENU_ID, A.PRGM_ID, A.UP_MENU_ID, A.MENU_NM, A.SORT_SEQ, A.USE_FG, A.RMRK, A.REG_USER_NO, A.REG_DTTM, A.PROC_USER_NO, A.PROC_DTTM, A.COM_ID
             , LVL + 1 AS LVL
             , CONVERT(CONCAT(T, '-', REPEAT('0', 5-LENGTH(A.SORT_SEQ)), A.SORT_SEQ), VARCHAR(100)) AS T
         FROM COMM_MENU  A
        INNER JOIN CTE B ON A.COM_ID=B.COM_ID AND A.UP_MENU_ID = B.MENU_ID
        WHERE A.COM_ID = #{session.comId}
    )
    SELECT A.MENU_ID, A.PRGM_ID, A.UP_MENU_ID, A.MENU_NM, A.SORT_SEQ, A.USE_FG, A.RMRK, A.REG_USER_NO, A.REG_DTTM, A.PROC_USER_NO, A.PROC_DTTM, A.COM_ID
         , A.LVL
         , A.UP_MENU_ID AS PARENT_ID
      FROM CTE A
      LEFT OUTER JOIN COMM_PRGM B ON A.PRGM_ID = B.PRGM_ID
     WHERE 1=1 
       -- AND UP_MENU_ID <![CDATA[<>]]> ''
       AND A.COM_ID = #{session.comId}
       <if test="useFg != null and useFg != ''">
       AND A.USE_FG = #{useFg}
       </if>
       <if test="sysDivCd != null and sysDivCd !=''">
       AND A.SYS_DIV_CD = #{sysDivCd}
       </if>
     ORDER 
        BY T
    </select>

    <insert id="insertMenu">
    /* comm.menuMng.insertMenu : 메뉴 추가 */
    <selectKey keyProperty="menuId" resultType="java.lang.String" order="BEFORE">
    SELECT /* 메뉴ID 채번 */
           CONCAT('MNU', LPAD(NEXT VALUE FOR SEQ_COMM_MENU, 4,'0'))
    </selectKey>
    INSERT 
      INTO COMM_MENU
      ( 
         MENU_ID
        ,COM_ID
        ,SYS_DIV_CD 
        ,PRGM_ID
        ,UP_MENU_ID
        ,MENU_NM
        ,SORT_SEQ
        ,USE_FG
        ,RMRK
        ,REG_USER_NO
        ,REG_DTTM
        ,PROC_USER_NO
        ,PROC_DTTM
      ) 
    VALUES
    (
         #{menuId}
        ,#{comId}
        ,#{sysDivCd}
        ,#{prgmId}
        ,#{upMenuId}
        ,#{menuNm}
        ,#{sortSeq}
        ,#{useFg}
        ,#{rmrk}
        ,#{session.userNo}
        ,NOW()
        ,#{session.userNo}
        ,NOW()
    )   
    </insert>

    <update id="updateMenu">
    /* comm.menuMng.updateMenu :  수정 */
        UPDATE COMM_MENU
           <trim prefix="SET" prefixOverrides=",">
               <if test="sysDivCd != null and sysDivCd != ''">
               ,SYS_DIV_CD = #{sysDivCd}
               </if>
               <if test="prgmId != null and prgmId != ''">
               ,PRGM_ID = #{prgmId}
               </if>
               <if test="upMenuId != null and upMenuId != ''">
               ,UP_MENU_ID = #{upMenuId}
               </if>
               <if test="menuNm != null and menuNm != ''">
               ,MENU_NM = #{menuNm}
               </if>
               <if test="sortSeq != null and sortSeq != ''">
               ,SORT_SEQ = #{sortSeq}
               </if>
               <if test="useFg != null and useFg != ''">
               ,USE_FG = #{useFg}
               </if>
               <if test="rmrk != null and rmrk != ''">
               ,RMRK = #{rmrk}
               </if>
               ,PROC_USER_NO = #{session.userNo}
               ,PROC_DTTM = NOW()
           </trim>
         WHERE 1=1
           AND MENU_ID = #{menuId} 
           AND COM_ID = #{comId} 
    </update>

    <delete id="deleteMenu">
    /* comm.menuMng.deleteMenu : 메뉴 삭제 */
    DELETE
      FROM COMM_MENU
     WHERE 1=1  
       AND MENU_ID = #{menuId}
       AND COM_ID = #{comId}
    </delete>

    <select id="selectAuthMenu" resultType="com.lsitc.fems.comm.auth.vo.CommMenuVo">
    /* comm.menuMng.selectAuthMenu 권한이 있는 메뉴 목록 */
        WITH recursive MENU_LIST AS (
            SELECT /* 권한있는 메뉴 목록 조회 */
                   D.MENU_ID /* 메뉴ID */
                 , D.MENU_NM /* 메뉴명 */
                 , D.UP_MENU_ID /* 상위메뉴ID */
                 , E.URL /* URL */
                 , C.AUTH_CD 
                 , D.SORT_SEQ
                 , E.PRGM_ID
              FROM COMM_ROLE_USER A /* 역할별사용자 */
             INNER JOIN COMM_MENU_ROLE B ON ( A.COM_ID=B.COM_ID and A.ROLE_ID  = B.ROLE_ID ) /* 역할별메뉴 */
              LEFT OUTER JOIN COMM_MENU_ROLE_AUTH C ON ( B.COM_ID=C.COM_ID and B.ROLE_ID = C.ROLE_ID AND B.MENU_ID = C.MENU_ID ) /* 역할별 권한 */ 
             INNER JOIN COMM_MENU D ON ( A.COM_ID=D.COM_ID and B.MENU_ID = D.MENU_ID ) /* 메뉴 */
              LEFT OUTER JOIN COMM_PRGM E ON ( D.PRGM_ID = E.PRGM_ID ) /* 프로그램 */
             WHERE A.COM_ID=#{session.comId}
               /* essential */
               AND A.USER_NO = #{session.userNo} /* USER_NO */
               AND NOW() BETWEEN A.APLY_START_DT AND A.APLY_END_DT /* 현재 유효한것만 */
               AND D.USE_FG = '1' /* 메뉴-사용여부 Y인것만 */
       )
       , MENU_LIST_GRP AS (         
            SELECT /* LIST_AGG이 안되 GRP하기 위함. */
                   A.MENU_ID
                  ,A.MENU_NM
                  ,A.UP_MENU_ID
                  ,A.URL
                  ,A.SORT_SEQ
                  ,(SELECT /* 사용자가 가지는 ROLE */
		              	GROUP_CONCAT(C.AUTH_CD)
					FROM MENU_LIST C
					WHERE 1=1 
		                AND C.MENU_ID = A.MENU_ID
                  	) AS AUTH_CD
                  ,A.PRGM_ID
              FROM MENU_LIST A
             GROUP
                BY A.MENU_ID
                  ,A.MENU_NM
                  ,A.UP_MENU_ID
                  ,A.URL
                  ,A.SORT_SEQ
                  ,A.PRGM_ID
       ), MENU_TREE AS (
                SELECT /* Tree로 변경. */
                       CONVERT('0', VARCHAR(10)) AS MENU_ID
                      ,CONVERT('ROOT', VARCHAR(200)) AS MENU_NM                      
                      ,CONVERT('', VARCHAR(10)) AS UP_MENU_ID
                      ,CONVERT('', VARCHAR(200)) AS URL
                      ,CONVERT('', VARCHAR(4000)) AS AUTH_CD
                      ,0 AS LVL
                      ,CONVERT('00000', VARCHAR(100)) AS SORT_SEQ
                      ,CONVERT('', VARCHAR(10)) AS PRGM_ID
                 UNION ALL
                SELECT A.MENU_ID
                      ,A.MENU_NM
                      ,A.UP_MENU_ID
                      ,A.URL
                      ,CONVERT(A.AUTH_CD, VARCHAR(4000)) AS AUTH_CD 
                      ,B.LVL + 1 AS LVL
                      ,CONVERT(CONCAT(B.SORT_SEQ, '-', REPEAT('0', 5-LENGTH(A.SORT_SEQ)), A.SORT_SEQ), VARCHAR(100)) AS SORT_SEQ
                      ,A.PRGM_ID
                  FROM MENU_LIST_GRP A
                 INNER
                  JOIN MENU_TREE B ON A.UP_MENU_ID = B.MENU_ID
        )
	    SELECT 
	           MENU_ID
	          ,MENU_NM
	          ,UP_MENU_ID
	          ,URL
	          ,AUTH_CD
	          ,lvl
	          ,PRGM_ID
	      FROM MENU_TREE
	     ORDER 
	        BY SORT_SEQ, MENU_NM
    </select>
    
    <insert id="saveBookmark">
    	INSERT INTO COMM_USER_BKMK_MENU(
	    	 COM_ID
			,USER_NO
			,MENU_ID
			,REG_USER_NO
			,REG_DTTM
			,PROC_USER_NO
			,PROC_DTTM
    	)VALUES(
    		 #{session.comId}
    		,#{session.userNo}
    		,#{menuId}
    		,#{session.userNo}
	        ,NOW()
	        ,#{session.userNo}
	        ,NOW()
    	)
    </insert>
    
    <delete id="deleteBookmark">
    	DELETE FROM COMM_USER_BKMK_MENU WHERE COM_ID = #{session.comId} AND USER_NO = #{session.userNo} AND MENU_ID = #{menuId}
    </delete>
    
    <select id="selectMyMenu"  resultType="com.lsitc.fems.comm.auth.vo.CommMenuVo">
    	SELECT
    		 A.COM_ID
    		,A.USER_NO
    		,A.MENU_ID
    		,B.PRGM_ID
    		,B.MENU_NM
    		,C.URL
    	FROM COMM_USER_BKMK_MENU A
    	LEFT JOIN COMM_MENU B ON (A.COM_ID = B.COM_ID AND A.MENU_ID = B.MENU_ID)
    	LEFT JOIN COMM_PRGM C ON (B.PRGM_ID = C.PRGM_ID)
   		WHERE A.COM_ID = #{session.comId}
   		AND A.USER_NO = #{session.userNo}
   		ORDER BY B.MENU_NM 
    </select>
</mapper>